This is Ese Omene. The following is a description of how I implemented the face into this screen transition
app. To start, I would first have to tell you how the Transition App works. This will be less in depth because
I didn't create the app, but if you still could honestly care less (which... I can't lie, I wouldn't blame you for)
you can skip to the Nth bullet point where I summarize all of this.

1. Disclaimer
    Keep in mind, I did not create the Transition App, so I may not have all the necessary information that you want to know,
    but after looking through and talking to the person who created the App (Michael) I had a general idea on what it does and how
    I could (and did) incorporate the Face and it's functionality into the Transition App.

2. What the Transition App does
    The app allows you to manipulate a Fragment (a sub activity that will hold the face) to reveal more information that's on the mainActivity.
    The app allows you to manipulate this fragment in what is dubbed "Transitions". The Transitions are as follows:
        TransitionEyesToBottom: moves the fragment down until only the eyes shows
        TransitionFade: makes the face fade away to reveal the rest of the activity
        TransitionShrink: scales the face down until the face is no longer visible, revealing the rest of the activity
        TransitionSwipe: moves the face all the way to the right, revealing the rest of the activity
        TransitionToUpperLeftCorner: scales the face to a mini screen and places it to the upper left corner, showing parts of the activity

3. How the App does this
    The App does this by utilizing something called Fragments. Fragments are used to hold multiple Activities/Screens at once, so that way
    you can have both a Activity for the Face, as well for an activity for the other information that you wanted. The Fragment used is called
    FaceFragment... which is pretty much all I know about it lol.

    I had also emailed Michael when trying to understand the code (because honestly this code kinda scares me lol) and here was his synopsis of the
    rest of the functionality:

    "The app's purpose was to demo five different animations that could be used to switch from the Temi's "face" to some sort of interactive content.

     Android applications are divided into different pages/screens, called Activities. Sometimes when dealing with older versions of Android,
     you'll want a backwards-compatible Activity. In the app, I used a backwards-compatible type of Activity called AppCompatActivity.
     Since I was showing 5 variations of the same "type" of AppCompatActivity, I created a new type of AppCompatActivity,
     which I called TransitionDemo. Most of TransitionDemo is just copied and pasted from the sample app from the Temi SDK.
     However, I added a few variables. The specific transition demo being shown, such as TransitionShrink, TransitionSwipe, etc.
     is just a TransitionDemo with an extra animation added.

     The TransitionDemos can exist in five different "states":
     1.) The robot face covers the whole screen and will continue to do so until the user pokes it
     2.) The robot face plays an animation to reveal some dummy content like a fake quiz. Once the animation is complete, it moves to the next state.
     3.) The dummy content is displayed and waits for the user to poke the screen again
     4.) The robot face plays an animation until it covers the whole screen again
     5.) The robot face covers the whole screen until the user pokes it again

     I used a Java Enum to name each of these "states":
        INIT
        TRANS_TO
        WAIT
        TANS_FROM
        END

     TransitionDemos also contain the following fields:
        protected View frame
        protected View faceFragmentFrame
        protected View slides[]
        protected View anim
        protected View reverseAnim
        protected States state
        protected View content

     frame is the whole layout of the TransitionDemo. I use it to keep track of the size of the screen so that I can make the face shrink
      to a certain percentage of the screen and other stuff.
     faceFragmentFrame contains the robot's face.
     state contains the current state (e.g. INIT, WAIT, etc.)
     content contains the fake quizzes that appear onscreen

     The other fields aren't used. I just forgot to delete them. I also forgot to delete the methods getSlides(), onFragmentInteraction(Uri u), and onQuizInteraction(Uri u), and the interfaces from which they inherit.

     The only method in TransitionDemo that does anything useful is getFrames():
         protected void getFrames(){
            frame = findViewById(R.id.main_activity_frame);
            faceFragmentFrame = findViewById(R.id.face_fragment);
            content = findViewById(R.id.content);
         }

     If you look at the individual layout files for each demo, they all contain a ConstraintLayout called main_activity_frame,
      a Fragment called face_fragment (which is defined in a separate layout file), and a FrameLayout called content.
      The getFrames() method is called in the onCreate() method of each specific demo, after the corresponding layout has been
      inflated, to assign the variables for use in the animations.

     Each specific demo does the following:
     1.) It inflates its layout to show it on screen
     2.) It transforms the face into a button that only does stuff when the demo is in the INIT, TRANS_TO, and END states.
     3.) it transforms the quiz stuff into a button that only does stuff when the demo is in the WAIT and TRANS_FROM states

     Worth noting: TRANS_TO and TRANS_FROM are the states in which I do the animations." -Michael

4. How I used the Face code in Michael's Transition App.
    I incorporated my code into the following classes:
        TransitionDemo
        TransitionEyesToBottom
        FaceFragment

    FaceFragment has the callback method onCreateView(), which creates the fragment needed to be put inside the Activity.
     in this method, I changed the fragment layout from the stand in face layout to the new F-6 robot design created for the temi-project.
     (For more information about the F-6 design, check out the Face README)

    TransitionEyesToBottom is one of the methods that extends the TransitionDemo, that is supposed to put the Face Fragment screen down until
         only the eyes show. This needed to be modified because it was created for the previous layout, that had eyes in a different position on the
         screen than the new layout. I modified the variables needed to create the proper shift.

    TransitionDemo is the abstract class that holds the Activity. For this reason, I create the instance of the Face class in here.
     That way, anything you wanted to do to the Face, no matter the transition, the face would work with no need to instantiate the Face class again.
     I create the instance of the Face in the onStart() callback method because the Fae class uses the imageViews in the Fragment View, which
     won't technically be created until onCreateView().
     Fragment Lifecycle:
         onCreate() -> onCreateView() -> onStart()
     Therefore, putting the Face in onCreate() will cause the screen to go blank, so keep that in mind.
     After I instantiated the class, you can call any of the public methods (changeFaceTo(), and the setters/getters) in the TransitionDemo class.
     So far I have used the functions in the Face class to change his mood depending on the "BeWithMeStatus" and onWakeUpCall() method

5. Conclusion
    So to summarize:
        I changed the layout that will be displayed as the face fragment to the F-6 design (FraceFragment.java)
        I changed the variables needed to transition the eyes to the bottom of the screen to fit with the new face design (TransitionEyesToBottom.java)
        I instantiated the Face into the TransitionDemo class and used some of it's functions in the Temi SDK robot commands.

    This is everything that I have done with the transition app so far, but there are still things that I have been assigned to do that I have not
    done, such as incorporating different gazes, adding a thoughtful face, and lip syncing the temi's mouth to the words that the robot speaks.

    If I haven't changed those, than that means it's up to you to fix them (if you're working on the temi-project after me)

6. Edits to Code
    I created one class that extends the TransitionDemo class called TransitionStart, and this is basically the MainActivity of the app
    that will display the face of the Temi Robot. Short clicks will make the robot blink while long clicks will open a menu that allows
     the user to select a transition type.

                                                                                                                            -Ese Omene


